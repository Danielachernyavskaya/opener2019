пакет opener19;
 
импорт задач.AbstractTask;
импорт задач.Тестер;
импорт utils.MyMath;
импорт utils.бревно.Лесоруб;
 
импорт java.математика.BigInteger;
импорт java.util.Матрицы;
импорт java.util.Случайный;
импорт java.util.параллельный.атомный.Атомиклонг;
импорт java.util.поток.Коллекционеры;
импорт java.util.поток.IntStream;
импорт java.util.поток.Поток;
 
//Ответ :
открытый класс Task_17 расширяет AbstractTask {
public static void main (String[] args) {
Лесоруб.init ("default.бревно");
Тестер.test (new Task_17());
Лесоруб.закрывать();
    }
 
частный статический окончательный длинный множитель = 0x5DEECE66DL;
частное статическое конечное длинное дополнение = 0xBL;
частная статическая конечная длинная маска = (1L <;
 
private static final long MOD = маска + 1;
частная статическая конечная длинная мультивселенная = MyMath.modInverse (множитель, мод);
 
private static final BigInteger MAGIC_VALUE = новый BigInteger(
"DEADBABE175505AD", 16);
 
String key =
"933E1247EDA41017DAC7EB22964CE522252C76BBD9F8D275B2783560BD23106EDEA5E745D148507E";
 
публичное решение пустоты() {
 
Строка p1 = key.подстрока (0, 48);
Строка p2 = key.подстрока (48, 64);
Строка p3 = key.подстрока (64);
 
long time = новый BigInteger (p3, 16).xor (MAGIC_VALUE).лонгвал();
 
long keyCnt = поток
.конкат(
Поток.(p1.split (" (?<=\\Г.{16})")).карта (s16 -> new BigInteger(s16, 16)),
Поток.of (MAGIC_VALUE)
                )
.уменьшить (новый BigInteger (p2, 16), BigInteger:: xor)
.лонгвал();
 
long[] rr = поток.(p1.split (" (?<=\\Г.{8})")).mapToLong(s - > Long.parseLong (s, 16)).toArray();
Система.из.println (массивы.toString(rr));
 
long [] key = новый long[6];
for (int k = 0; k ) {
long rk = rr[k];
long rn = rr[k + 1];
 
for (long i = 0; i < (1 <) {
long prevNum = (rk <;
long nextNum = (prevNum * множитель + дополнение) & маска;
if ((nextNum >>>>>> 16) == rn) {
K = prevNum;
ключ[k + 1] = nextNum;
Система.из.println (prevNum + "" + nextNum);
                }
            }
        }
 
Long seed = ключ[5];
for (int i = 0; i ) {
for (int j = 0; j ) {
seed = (((seed + MOD-addend) % MOD) * multInverse) % MOD;
            }
        }
 
if (seed ;
 
 
long adminTime = seed ^ multiplier;
 
adminTime = adminTime | ((time > > > 48L) > > <);
 
int [] admin = новый int[6];
for (int i = 0; i ) {
seed = (seed * multiplier + addend) & маска;
admin[i] = (int) (seed >>>>>> 16);
        }
 
Строка P1 = IntStream.of (admin)
.mapToObj (randInt -> String.формат ("%08X", randInt))
.предел(6)
.collect (коллекционеры.присоединение());
 
long P2 = поток
.конкат(
 
Поток.(P1.split (" (?<=\\Г.{16})")).карта (s16 -> new BigInteger(s16, 16)),
Поток.of (BigInteger.valueOf(0))
                )
.уменьшить (MAGIC_VALUE, BigInteger::xor)
.лонгвал();
 
BigInteger P3 = BigInteger.valueOf (adminTime).xor (MAGIC_VALUE);
 
Система.из.println(
Строка.формат ("%s%016X%016X", P1, P2, P3));
 
Система.из.println();
Система.из.println (Long.toString (time, 2));
Система.из.println (Long.toString (adminTime, 2));
Система.из.println (adminTime );
 
KeyGenerator gen = новый генератор ключей (adminTime);
Система.из.println (gen.adminKey);
 
// Система.из.println();
//
// BigInteger bTime = BigInteger.valueOf (время);
// for (int i = 1; i ) {
//// if (i > keyCnt-3) {
//// Система.из.println (gen.newKey (bTime));
//// } еще {
// gen.rand.nextInt();
// gen.rand.nextInt();
// gen.rand.nextInt();
// gen.rand.nextInt();
// gen.rand.nextInt();
// gen.rand.nextInt();
// gen.keyCnt.getAndIncrement();
////            }
//        }
// Система.из.println();
// Система.из.println (gen.newKey (bTime));
 
Система.из.println();
for (int i = 0; i ) {
Система.из.println (Integer.toString (i ^ 0xD, 16));
        }
    }
 
открытый статический Кейгенератор конечного класса {
 
 
частный статический экземпляр KeyGenerator = новый KeyGenerator();
 
открытый статический генератор ключей getInstance() {
возврат экземпляра;
        }
 
private final AtomicLong keyCnt = новый AtomicLong();
частный финал Random rand;
частная конечная строка adminKey;
 
закрытый генератор ключей() {
эта система.nanoTime());
        }
 
закрытый KeyGenerator (долгое время) {
rand = новый случайный (время);
adminKey = newKey (BigInteger.valueOf (время));
        }
 
частная строка newKey (BigInteger время) {
Строка P1 = rand
.значения типа int()
.mapToObj (randInt -> String.формат ("%08X", randInt))
.предел(6)
.collect (коллекционеры.присоединение());
 
long P2 = поток
.конкат(
 
Поток.(P1.split (" (?<=\\Г.{16})")).карта (s16 -> new BigInteger(s16, 16)),
Поток.of (BigInteger.valueOf (keyCnt.getAndIncrement()))
                    )
.уменьшить (MAGIC_VALUE, BigInteger::xor)
.лонгвал();
 
BigInteger P3 = время.xor (MAGIC_VALUE);
 
// P1 6 * 8 = 48 случайных шестнадцатеричных цифр
// P2 ?
// P3 is ?
 
возвращенная строка.формат(
"%s%016X%016X",
P1,
P2,
P3
            );
        }
 
публичная строка getUniqueKey() {
возврат newKey (BigInteger.valueOf (System.nanoTime()));
        }
 
публичная строка getAdminKey() {
возврат adminKey;
        }
    }
}
